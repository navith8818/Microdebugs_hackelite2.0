#include "Arduino.h"
#ifndef DISPLAY_H
#define DISPLAY_H

#include <U8g2lib.h>
#include <RTClib.h> // Install RTClib if using DS3231/DS1307

RTC_DS3231 rtc;

extern U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2;

// -------------------------
// Welcome text animation
// -------------------------
inline void popupText(const char* text, uint16_t letterDelay = 50, uint16_t holdTime = 500) {
    u8g2.setFont(u8g2_font_ncenB08_tr);
    int textWidth = u8g2.getStrWidth(text);
    int textHeight = u8g2.getMaxCharHeight();
    int x = (128 - textWidth) / 2;
    int y = (64 + textHeight) / 2;

    for (int i = 0; text[i] != '\0'; i++) {
        char partial[50];
        strncpy(partial, text, i + 1);
        partial[i + 1] = '\0';

        u8g2.firstPage();
        do {
            u8g2.drawStr(x, y, partial);
        } while (u8g2.nextPage());
        delay(letterDelay);
    }

    delay(holdTime);
}

// -------------------------
// Show static text
// -------------------------
inline void showText(const char* text, uint16_t holdTime = 1000) {
    u8g2.setFont(u8g2_font_ncenB08_tr);
    int textWidth = u8g2.getStrWidth(text);
    int textHeight = u8g2.getMaxCharHeight();
    int x = (128 - textWidth) / 2;
    int y = (64 + textHeight) / 2;

    u8g2.firstPage();
    do {
        u8g2.drawStr(x, y, text);
    } while (u8g2.nextPage());
    delay(holdTime);
}

// ----------------------------
// Example 40x40 icon bitmaps (PROGMEM)
// ----------------------------
const uint8_t icon0[200] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x08, 0x00, 0x06, 0x00, 0xc0, 
	0x08, 0x70, 0x18, 0x00, 0xa0, 0x08, 0x88, 0x20, 0x00, 0x98, 0x08, 0x88, 0x20, 0x00, 0x86, 0xc9, 
	0xcb, 0x49, 0x00, 0x01, 0x09, 0x58, 0x42, 0x00, 0x81, 0xc8, 0x42, 0x02, 0x00, 0x81, 0x08, 0x40, 
	0x42, 0x00, 0x81, 0x00, 0x80, 0x41, 0x00, 0xe1, 0xf0, 0x07, 0x60, 0x00, 0x81, 0x00, 0xe0, 0x70, 
	0x00, 0x87, 0x00, 0x00, 0x7c, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x1f, 0x00, 0xc0, 0x7f, 0x00, 
	0x27, 0x00, 0xc0, 0x67, 0xc0, 0x60, 0x00, 0xcc, 0x6b, 0x40, 0x80, 0x00, 0xc6, 0x6d, 0x20, 0x80, 
	0x81, 0xc7, 0x6d, 0x10, 0x80, 0xc7, 0xc7, 0x6d, 0x10, 0x00, 0xff, 0xc7, 0x71, 0x08, 0x01, 0xff, 
	0xc3, 0x3f, 0x84, 0x01, 0xff, 0xc0, 0x3f, 0x44, 0x01, 0x7f, 0xc0, 0x1f, 0x22, 0x01, 0x01, 0xc0, 
	0x0f, 0x22, 0x01, 0x01, 0xc0, 0x03, 0x44, 0x01, 0x01, 0x00, 0x00, 0x88, 0x01, 0x01, 0x00, 0x00, 
	0x10, 0x01, 0x01, 0x00, 0x00, 0x20, 0x01, 0x01, 0x00, 0x00, 0x20, 0x01, 0x01, 0x00, 0x00, 0x20, 
	0x01, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t icon1[200] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x83, 0x83, 0x03, 0x00, 0x80,
	0x83, 0x83, 0x03, 0x00, 0xb0, 0xbb, 0xbb, 0x1b, 0x00, 0xb8, 0xbb, 0xbb, 0x3b, 0x00, 0xbc, 0xbb,
	0xbb, 0x7b, 0x00, 0xbc, 0xbb, 0xbb, 0x7b, 0x00, 0x7c, 0x7b, 0x7b, 0x7b, 0x00, 0xfc, 0xfe, 0xfe,
	0x7e, 0x00, 0xfc, 0xff, 0xff, 0x7f, 0x00, 0xfc, 0xff, 0xff, 0x7f, 0x00, 0xfc, 0xff, 0xff, 0x7f,
	0x00, 0xfc, 0xff, 0xff, 0x7f, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x00,
	0x0c, 0x8f, 0xe7, 0x63, 0x00, 0x0c, 0xcf, 0xe7, 0x63, 0x00, 0x0c, 0x8f, 0xe7, 0x63, 0x00, 0x0c,
	0x00, 0x00, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x20, 0x00, 0x0c, 0x8f, 0x07, 0xfe, 0x03, 0x0c, 0xcf,
	0x07, 0x03, 0x06, 0x0c, 0x8f, 0x87, 0x01, 0x0c, 0x0c, 0x00, 0xc0, 0x30, 0x18, 0x0c, 0x00, 0x40,
	0x30, 0x10, 0x0c, 0x8f, 0x67, 0x30, 0x30, 0x0c, 0xcf, 0x67, 0x30, 0x20, 0x0c, 0xcf, 0x27, 0xf0,
	0x21, 0x0c, 0x86, 0x23, 0xe0, 0x23, 0x1c, 0x00, 0x60, 0x00, 0x20, 0x3c, 0x00, 0x40, 0x00, 0x30,
	0xf8, 0xff, 0x5f, 0x00, 0x10, 0xe0, 0xff, 0x9f, 0x00, 0x18, 0x00, 0x00, 0x80, 0x01, 0x0c, 0x00,
	0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t icon2[200] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
	0x3c, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0xe0, 0xff,
	0x07, 0x00, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0xf8, 0xff, 0x1f,
	0x00, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00,
	0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00,
	0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc,
	0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfc, 0xff,
	0x3f, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff,
	0x00, 0x80, 0xff, 0xff, 0xff, 0x01, 0x80, 0xff, 0xff, 0xff, 0x01, 0x00, 0xff, 0xff, 0xff, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00,
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t icon3[200] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
	0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xc0, 0xe7, 0x03, 0x00, 0x00, 0xf8, 0x30, 0x1f, 0x00,
	0x00, 0x7c, 0xf0, 0x3e, 0x00, 0x00, 0x30, 0xf0, 0x0c, 0x00, 0x00, 0x18, 0x70, 0x18, 0x00, 0x00,
	0x18, 0x30, 0x18, 0x00, 0x00, 0x18, 0x10, 0x18, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x18,
	0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00,
	0x0c, 0x00, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x60, 0x00, 0x06, 0x00, 0x00, 0xc0, 0x81, 0x03,
	0x00, 0x00, 0x80, 0xff, 0x01, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t icon4[200] PROGMEM = { 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x00, 0x00,
	0xe0, 0xe1, 0x01, 0x00, 0x00, 0xe0, 0xc0, 0x01, 0x00, 0xc0, 0x7f, 0xc4, 0xff, 0x00, 0xe0, 0x7f,
	0xcc, 0xff, 0x00, 0xe0, 0x3f, 0x84, 0xff, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x01, 0xe0, 0x00, 0x00,
	0xc0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0x01, 0xe0, 0xff, 0xff, 0xff, 0x01, 0xe0, 0xff, 0xff, 0xff,
	0x01, 0xe0, 0x71, 0x00, 0xe0, 0x01, 0xe0, 0x71, 0x00, 0xf0, 0x01, 0xe0, 0xff, 0xff, 0xff, 0x01,
	0xe0, 0xff, 0xff, 0xff, 0x01, 0xe0, 0xff, 0xff, 0xff, 0x01, 0xe0, 0x71, 0x00, 0xe0, 0x01, 0xe0,
	0x71, 0x00, 0xf0, 0x00, 0xe0, 0xff, 0xff, 0x7f, 0x0c, 0xe0, 0xff, 0xff, 0x3f, 0x1e, 0xe0, 0xff,
	0xff, 0x1f, 0x1f, 0xe0, 0xff, 0xc3, 0x8f, 0x0f, 0xe0, 0xff, 0x81, 0xc7, 0x07, 0xe0, 0xff, 0x0c,
	0xe3, 0x07, 0xe0, 0x7f, 0x1e, 0xf0, 0x03, 0xe0, 0x7f, 0x3c, 0xf0, 0x01, 0xe0, 0x7f, 0x7c, 0xf8,
	0x00, 0xe0, 0xff, 0xf8, 0x7c, 0x00, 0xe0, 0xff, 0xf1, 0x3f, 0x00, 0xe0, 0xff, 0xe3, 0x1f, 0x00,
	0xe0, 0xff, 0xc7, 0x0f, 0x00, 0xe0, 0xff, 0x8f, 0x07, 0x00, 0xc0, 0xff, 0x1f, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t icon5[200] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x00, 0x60, 0x00, 0x03, 0x38, 0x00, 0xe0, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x01, 0x00,
	0x1e, 0x00, 0x80, 0x03, 0x07, 0x0e, 0x00, 0x00, 0xe1, 0x3f, 0x02, 0x00, 0x00, 0xf8, 0x7f, 0x00,
	0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x01, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00,
	0x00, 0xfe, 0x3f, 0x20, 0x00, 0x00, 0xff, 0x0f, 0xfe, 0x03, 0x3f, 0xff, 0x81, 0xff, 0x0f, 0x3f,
	0x7f, 0xc0, 0xff, 0x1f, 0x00, 0x3f, 0xfc, 0xff, 0x3f, 0x00, 0x1e, 0xff, 0xff, 0x3f, 0x00, 0x80,
	0xff, 0xff, 0x7f, 0x00, 0xc0, 0xff, 0xff, 0x7f, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
	0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff,
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x7f, 0xc0, 0xff, 0xff, 0xff, 0x7f,
	0xc0, 0xff, 0xff, 0xff, 0x7f, 0xc0, 0xff, 0xff, 0xff, 0x3f, 0x80, 0xff, 0xff, 0xff, 0x1f, 0x80,
	0xff, 0xff, 0xff, 0x0f, 0x00, 0xfe, 0xff, 0xff, 0x07, 0x00, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t icon6[200] PROGMEM = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x1e, 0x00, 0x00, 
	0xe0, 0x0f, 0x1e, 0x00, 0xf8, 0x31, 0x0c, 0x33, 0x00, 0x00, 0x30, 0x18, 0x33, 0x0c, 0x00, 0x30, 
	0x18, 0x1e, 0x1f, 0xe0, 0x31, 0x18, 0x9e, 0x03, 0xe0, 0x31, 0x18, 0x80, 0x01, 0x00, 0x30, 0x18, 
	0x80, 0x00, 0x00, 0xb0, 0x19, 0x80, 0x01, 0xf8, 0x91, 0x19, 0x80, 0x03, 0xf8, 0x90, 0x19, 0x00, 
	0x1f, 0x00, 0x90, 0x19, 0x00, 0x0c, 0xe0, 0x90, 0x19, 0x00, 0x00, 0xe0, 0x91, 0x19, 0x00, 0x00, 
	0x00, 0x90, 0x19, 0x00, 0x00, 0x00, 0x90, 0x19, 0x00, 0x00, 0xf8, 0x91, 0x19, 0x00, 0x00, 0xf8, 
	0x91, 0x19, 0x00, 0x00, 0x00, 0x90, 0x19, 0x00, 0x00, 0x00, 0x90, 0x19, 0x00, 0x00, 0xe0, 0x91, 
	0x19, 0x00, 0x00, 0xe0, 0x90, 0x19, 0x00, 0x00, 0x00, 0x90, 0x19, 0x00, 0x00, 0xf0, 0x90, 0x19, 
	0x00, 0x00, 0xf8, 0x99, 0x19, 0x00, 0x00, 0x00, 0x9c, 0x31, 0x00, 0x00, 0x00, 0x8c, 0x63, 0x00, 
	0x00, 0x00, 0xc6, 0x67, 0x00, 0x00, 0x00, 0x66, 0x6e, 0x00, 0x00, 0x00, 0x26, 0x4c, 0x00, 0x00, 
	0x00, 0x66, 0x4c, 0x00, 0x00, 0x00, 0xe6, 0x66, 0x00, 0x00, 0x00, 0xcc, 0x63, 0x00, 0x00, 0x00, 
	0x0c, 0x30, 0x00, 0x00, 0x00, 0x18, 0x38, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0xe0, 
	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const uint8_t* menuIcons[] = {icon0, icon1, icon2, icon3, icon4, icon5, icon6};

// ----------------------------
// Draw up/down arrows
// ----------------------------
inline void drawArrows() {
    u8g2.drawTriangle(60, 0, 68, 0, 64, 5);    // Up
    u8g2.drawTriangle(60, 63, 68, 63, 64, 58); // Down
}

// ----------------------------
// Draw menu item
// ----------------------------
inline void drawMenuItem(const uint8_t* icon, const char* name, int yOffset = 12) {
    int xIcon = (128 - 40) / 2;
    int yIcon = yOffset;
    u8g2.drawXBMP(xIcon, yIcon, 40, 40, icon);

    u8g2.setFont(u8g2_font_ncenB08_tr);
    int textWidth = u8g2.getStrWidth(name);
    int xText = (128 - textWidth) / 2;
    int yText = yOffset + 50;
    u8g2.drawStr(xText, yText, name);

    drawArrows();
}

// ----------------------------
// Animate vertical slide
// ----------------------------
inline void slideMenuVertical(const char* names[], int oldIndex, int newIndex) {
    if (oldIndex == newIndex) return;

    int direction = (newIndex > oldIndex) ? -1 : 1; // down = -1, up = +1
    const int steps = 8;

    for (int i = 0; i <= steps; i++) {
        int offset = (64 * i / steps) * direction;

        u8g2.firstPage();
        do {
            drawMenuItem(menuIcons[oldIndex], names[oldIndex], offset);
            drawMenuItem(menuIcons[newIndex], names[newIndex], offset - 64 * direction);
        } while (u8g2.nextPage());
        delay(20);
    }
}

// ----------------------------
// Show selected menu item
// ----------------------------
inline void showSelectedItem(const char* name, uint16_t holdTime = 1000) {
    showText(name, holdTime);
}

// ----------------------------
// HUD display with time + battery
// ----------------------------
inline void showHUD(const char* timeStr, int batteryPercent) {
    u8g2.firstPage();
    do {
        u8g2.setFont(u8g2_font_ncenB08_tr);
        u8g2.drawStr(0, 12, timeStr);

        // Draw battery icon
        u8g2.drawFrame(85, 2, 18, 10);          // Battery outline
        u8g2.drawBox(85, 2, 18 * batteryPercent / 100, 10); // Battery fill
        u8g2.setCursor(105, 12);
        u8g2.print(batteryPercent);
        u8g2.print("%");
    } while (u8g2.nextPage());
}



// ----------------------------
// Menu-specific functions
// ----------------------------
inline void hudMenu() { showHUD("12:45", 75); }
inline void showTimeDate() {
    DateTime now = rtc.now(); // Get current time from RTC

    char timeStr[16];
    char dateStr[16];
    snprintf(timeStr, sizeof(timeStr), "%02d:%02d:%02d", now.hour(), now.minute(), now.second());


    u8g2.firstPage();
    do {
        u8g2.setFont(u8g2_font_ncenB08_tr);
        u8g2.drawStr(0, 12, "Time:");
        u8g2.drawStr(40, 12, "12.45");

        u8g2.drawStr(0, 24, "");
        u8g2.drawStr(40, 24, dateStr);

        // Draw a simple calendar for current month
        int startY = 30;
        u8g2.setFont(u8g2_font_5x7_tr);
        const char* days = "Su Mo Tu We Th Fr Sa";
        u8g2.drawStr(0, startY, days);

        int dayPosY = startY + 8;
        int dayOfWeek = now.dayOfTheWeek(); // 0 = Sunday, 6 = Saturday

        for (int d = 1; d <= 31; d++) { // Max 31 days
            int x = ((d - 1 + dayOfWeek) % 7) * 15; // Column
            int y = dayPosY + ((d - 1 + dayOfWeek) / 7) * 8; // Row

            char buf[3];
            snprintf(buf, sizeof(buf), "%2d", d);

            if (d == 6) {
                u8g2.drawBox(x, y - 6, 10, 7); // Highlight today
                u8g2.setDrawColor(0);           // Invert color for today
                u8g2.drawStr(x, y, buf);
                u8g2.setDrawColor(1);           // Reset
            } else {
                u8g2.drawStr(x, y, buf);
            }
        }
    } while (u8g2.nextPage());
}
// ----------------------------
// Notifications Menu
// ----------------------------
inline void notificationsMenu(const char* whatsappMsg = "Are we meeting ", const char* missedCall = "No missed calls") {
    u8g2.firstPage();
    do {
        u8g2.setFont(u8g2_font_ncenB08_tr);
        u8g2.drawStr(0, 12, "Notifications");

        u8g2.setFont(u8g2_font_5x7_tr);

        // WhatsApp message
        u8g2.drawStr(0, 28, "WhatsApp:");
        int msgLen = strlen(whatsappMsg);
        if (msgLen <= 20) { // fits screen
            u8g2.drawStr(0, 36, whatsappMsg);
        } else { // scroll text if too long
            static int offset = 0;
            char buf[21]; // display 20 chars at a time
            strncpy(buf, whatsappMsg + offset, 20);
            buf[20] = '\0';
            u8g2.drawStr(0, 36, buf);
            offset++;
            if (offset > msgLen - 20) offset = 0;
        }

        // Missed calls
        u8g2.drawStr(0, 50, "Missed Calls:");
        int callLen = strlen(missedCall);
        if (callLen <= 20) {
            u8g2.drawStr(0, 58, missedCall);
        } else { // scroll text if too long
            static int callOffset = 0;
            char buf2[21];
            strncpy(buf2, missedCall + callOffset, 20);
            buf2[20] = '\0';
            u8g2.drawStr(0, 58, buf2);
            callOffset++;
            if (callOffset > callLen - 20) callOffset = 0;
        }

    } while (u8g2.nextPage());
}


inline void stopwatchMenu(int btnSelect, int btnUp, int btnDown) {
    bool running = false;
    unsigned long startTime = 0;
    unsigned long elapsed = 0;

    int prevSelect = HIGH;
    int btnUpState, prevUp = HIGH;
    int btnDownState, prevDown = HIGH;

    while (true) {
        // Read all buttons
        int selectState = digitalRead(btnSelect);
        btnUpState = digitalRead(btnUp);
        btnDownState = digitalRead(btnDown);

        // Toggle start/pause on select button
        if (prevSelect == LOW && selectState == HIGH) {
            if (!running) {
                startTime = millis() - elapsed;
                running = true;
            } else {
                elapsed = millis() - startTime;
                running = false;
            }
        }

        // Exit to menu if up or down pressed
        if ((prevUp == LOW && btnUpState == HIGH) || (prevDown == LOW && btnDownState == HIGH)) {
            break; // exit submenu to menu
        }

        // Calculate elapsed time
        if (running) elapsed = millis() - startTime;

        unsigned long seconds = (elapsed / 1000) % 60;
        unsigned long minutes = (elapsed / 60000) % 60;
        unsigned long hours = elapsed / 3600000;

        // Display stopwatch
        u8g2.firstPage();
        do {
            u8g2.setFont(u8g2_font_ncenB14_tr);
            char buf[16];
            snprintf(buf, sizeof(buf), "%02lu:%02lu:%02lu", hours, minutes, seconds);
            int textWidth = u8g2.getStrWidth(buf);
            u8g2.drawStr((128 - textWidth)/2, 32, buf);

            u8g2.setFont(u8g2_font_ncenB08_tr);
            u8g2.drawStr(10, 55, running ? "Running" : "Paused");
            u8g2.drawStr(80, 55, "Press Up/Down to exit");
        } while (u8g2.nextPage());

        // Update previous states
        prevSelect = selectState;
        prevUp = btnUpState;
        prevDown = btnDownState;

        delay(50);
    }
}



inline void tasksMenu(int btnSelect, int btnUp, int btnDown) {
    // --- Task list (internal to function) ---
    const int MAX_TASKS = 10;
    const char* taskNames[MAX_TASKS] = {
        "Finish Project",
        "Call Mom",
        "Send Email",
        "Buy Groceries",
        "Prepare Report"
    };
    int numTasks = 5; // Current number of tasks

    int currentTask = 0;
    int prevSelect = HIGH;
    int prevUp = HIGH;
    int prevDown = HIGH;

    while (true) {
        // Read buttons
        int selectState = digitalRead(btnSelect);
        int upState = digitalRead(btnUp);
        int downState = digitalRead(btnDown);

        // Scroll tasks
        if (prevUp == LOW && upState == HIGH) {
            currentTask--;
            if (currentTask < 0) currentTask = numTasks - 1;
        }
        if (prevDown == LOW && downState == HIGH) {
            currentTask++;
            if (currentTask >= numTasks) currentTask = 0;
        }

        // Display tasks
        u8g2.firstPage();
        do {
            u8g2.setFont(u8g2_font_ncenB08_tr);
            u8g2.drawStr(0, 12, "Tasks:");

            u8g2.setFont(u8g2_font_5x7_tr);
            for (int i = 0; i < numTasks; i++) {
                int y = 24 + i * 10;
                if (i == currentTask) {
                    u8g2.drawBox(0, y - 8, 128, 10); // highlight
                    u8g2.setDrawColor(0);
                    u8g2.drawStr(2, y, taskNames[i]);
                    u8g2.setDrawColor(1);
                } else {
                    u8g2.drawStr(2, y, taskNames[i]);
                }
            }
            u8g2.drawStr(0, 63, "Press select to return");
        } while (u8g2.nextPage());

        // Check for select press to exit
        if (prevSelect == HIGH && selectState == LOW) { // button just pressed
            delay(50); // debounce
            if (digitalRead(btnSelect) == LOW) { // confirm still pressed
                while(digitalRead(btnSelect) == LOW); // wait until release
                break; // exit menu
            }
        }

        prevSelect = selectState;
        prevUp = upState;
        prevDown = downState;

        delay(50); // small loop delay
    }
}

inline void weatherMenu() { showText("Weather Menu"); }
inline void TemperatureMenu() { showText("Temperature 28 °C"); }

// ----------------------------
// Dispatch menu selection
// ----------------------------
inline void handleMenuSelection(int index, int btnSelect, int btnUp, int btnDown) {
    switch(index) {
        case 0: hudMenu(); break;
        case 1: showTimeDate(); break;
        case 2: notificationsMenu(); break;
        case 3: stopwatchMenu(btnSelect, btnUp, btnDown); break;
        case 4: tasksMenu(btnSelect, btnUp, btnDown); break;
        case 5: weatherMenu(); break;
        case 6: TemperatureMenu(); break;
        default: showText("Unknown Menu"); break;
    }
}

#endif
